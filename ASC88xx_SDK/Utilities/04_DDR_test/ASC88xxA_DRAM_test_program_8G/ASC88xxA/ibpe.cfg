1	/* ImgBackEndProcess */		gbIBPEYCmpntEn
1								gbIBPECCmpntEn
1								gbIBPEYOutEn
1								gbIBPECOutEn
0								bMDPMaskEn  
1								bOutPMaskEn
1								bMotionDtctEn;
1								gdwIBPENoiseReductionCMode; (NR_OFF = 0,NON_LOCAL_MEANS_NR_2D = 1, DE_IMPULSE = 3) no 3D support in C.
2								gdwIBPENoiseReductionYMode; (NR_OFF = 0,NON_LOCAL_MEANS_NR_2D = 1,NON_LOCAL_MEANS_NR_3D = 2, DE_IMPULSE = 3)
0								bDeInterlacerEn;
3								dwFrameBuffNum;
0								dwReadFrameMode. 0: 1C2R, 1: 1C2SubR, 2: 1C1R, 3: 1C.
0				                Geometric lens distortion correction enable (0: Disable, 1: Enable)\n");
1								bIBPEEdgeEnhanceEn
100								edge_enhancement alpha blending value (level 0-128)
15		/* NLM */				flNLMYParam;
15								flNLMCParam;
2								dwNLMYWinSize. 0:1x1, 1:3x3, 2:5x5
2								dwNLMCWinSize. 0:1x1, 1:3x3, 2:5x5
3								dwNLMYSrchRange. 0:+-1, 1:+-2, 2:+-3, 3:+-4, 
3								dwNLMCSrchRange. 0:+-1, 1:+-2, 2:+-3, 3:+-4,
4								gdwIBPENLM3DShiftWeight. 3'b0: reference data << 0.	3'b7: reference data << 7.
1								gdwIBPENLM3DRefNum. 1'b0: 1 temporal reference frame. 1'b1: 2 temporal reference frame.
13								Impulse threshold for Y component (31)\n"); //13
9								Impulse threshold for C component (23)\n"); //9
10								Neighbor difference threshold for Y component impulse detection(30)\n"); //10
8								Neighbor difference threshold for C component impulse detection(25)\n"); //8
255								Edge detection threshold for edge enhancement (100)\n");
333	/* Motion detection */		dwHorzMDGrid, for window setting.
333								dwVertMDGrid
990		/* Geometric Lens Distortion Correction */	Geometric lens distortion correction parameter 1 for Y (Param * 2^10)\n");
153													Geometric lens distortion correction parameter 2 for Y (Param * 2^20)\n");
253													Geometric lens distortion correction parameter 3 for Y (Param * 2^30)\n");
1													Positive geometric lens distortion correction parameter 1 for Y ?(0: Negative, 1: Positive)\n");
1													Positive geometric lens distortion correction parameter 2 for Y ?(0: Negative, 1: Positive)\n");
1													Positive geometric lens distortion correction parameter 3 for Y ?(0: Negative, 1: Positive)\n");
968													Geometric lens distortion correction parameter 1 for CbCr (Param * 2^10)\n");
538													Geometric lens distortion correction parameter 2 for CbCr (Param * 2^20)\n");
375													Geometric lens distortion correction parameter 3 for CbCr (Param * 2^30)\n");
1													Positive geometric lens distortion correction parameter 1 for CbCr ?(0: Negative, 1: Positive)\n");
1													Positive geometric lens distortion correction parameter 2 for CbCr ?(0: Negative, 1: Positive)\n");
1													Positive geometric lens distortion correction parameter 3 for CbCr ?(0: Negative, 1: Positive)\n");
288													Lens distortion correction buffer start position shift for Y component(288)\n");
288													Lens distortion correction buffer start position shift for CbCr component(288)\n");		                         
0		/* DeInterlacer Control */		gbIBPEDIEInFmtPlanar. 1'b0: interleave, 1'b1: planar
0										gbDIERefLowpassEn
2										DeInterlacer mode. 0:Weave, 1:Blending, 2:Motion-adaptive
3										SpatialDIEMode. 0: Bob, 1: ELA , 2: MELA, 3: MDOI
1										bStaticDtctEn       
1                                       bSubtitleMCEn       
0                                       bPulldown32RecoverEn
0                                       bPulldown22RecoverEn
200		/* DIE_TEMPORAL_THRESHOLD */	gdwDIEMCTHR
75										gdwDIEStaicTHR
1		/* DIE_SPATIAL_CONFIG */		dwELARange;           //Search range of the ELA interpolation.                                      
30                                      dwMDOIRange;          //Search range of the MDOI interpolation.                                     
20                                      dwMDOIVertTHR;        //Threshold for the vertical direction, determine whether it is flat or not.  
300                                     dwMDOIDetectTHR;      //Threshold for the detection of spatial direction.                           
40                                      dwMDOILocalTHR;       //Threshold for local maximum detection.                                      
0		/* DIE_STATIC_COFIG */			gbStaticSobelEN. Apply sobel filter for texture recognition or not.                                                  
30										gdwStaticSobelTHR. Threshold for sobel filter. Sobel result + dwStaticSobelTHR = Adaptive static threshold.  
1										gdwDIEStaticTrustNum. Times of continuous static condition detected for regarding it as real static.
0										gdwDIEStaticBlkW: 2・b00: Block width = 5, 2・b01: Block width = 7. 2・b10: Block width = 9.	
1										gdwDIEStaticBlkH: 1・b0: Block height = 1, 1・b1: Block height = 2.            
0										gbDIEStaticMorphoEN. Apply morphological operation on static map or not.
30		/* DIE_MORPHO_VERT_REGION */	gdwDIEMorphoRegionUp. The up region of applying mophological operation. It is adopted when row number is less than MORPHO_REGION_UP.		
30										gdwDIEMorphoRegionDown. The down region of applying mophological operation. It is adopted when row number is larger than MORPHO_REGION_DOWN.
30		/* DIE_MORPHO_HORIZ_REGION */	gdwDIEMorphoRegionLeft. The left region of applying mophological operation. It is adopted when column number is less than MORPHO_REGION_LEFT.
30                   					gdwDIEMorphoRegionRight. The right region of applying mophological operation. It is adopted when column number is larger than MORPHO_REGION_RIGHT.
0	/* MC */			bDIEMCHistEn           
1						dwDIEMCTrustNum     
1						gdwDIEMCBlkW: 2・b00: Block width = 5, 2・b01: Block width = 7. 2・b10: Block width = 9.	
1						gdwDIEMCBlkH: 1・b0: Block height = 1, 1・b1: Block height = 2.                        
7       				DWORD dwMCRange;                                           
0       				BOOL bMCMorphoEN;                       
2       				DWORD dwMCInterpMode;
1080     				DWORD dwMCRegionUp;                     
0	     				DWORD dwMCRegionDown;     
20		/*Pull-down frame division*/	Up percentage       
20										Down percentage
30										Left percentage
18										Right percentage										
75		/* 32 Pull-down threshoold */
177		/* Privacy mask */		byPMaskFillY;
55								byPMaskFillCb;
93								byPMaskFillCr;                      
0      /* NR strong mode */     NRStrongMode. 0: off, 1: basic, 2: 2d
7                               NRStrongWeight (max:15)
0                               bNRStrongMotionDtctEn
500                             dwNRStrongMotionDtctThr
500								dwNRStrongMotionDtctRefTh0
400								dwNRStrongMotionDtctRefTh1
200								dwNRStrongMotionDtctRefTh2
100								dwNRStrongMotionDtctRefTh3
31								dwNRStrongMotionDtctRefWeight0
25								dwNRStrongMotionDtctRefWeight1
15								dwNRStrongMotionDtctRefWeight2
10								dwNRStrongMotionDtctRefWeight3
500								dwNRStrongMotionDtctOutTh0
400								dwNRStrongMotionDtctOutTh1
200								dwNRStrongMotionDtctOutTh2
100								dwNRStrongMotionDtctOutTh3
1								dwNRStrongMotionDtctOutWeight0
2								dwNRStrongMotionDtctOutWeight1
5								dwNRStrongMotionDtctOutWeight2
10								dwNRStrongMotionDtctOutWeight3
0		/* EE strong mode */	bEEStrongEn
4								dwEEHPFDownShift
5								dwEEHPFShrunkThr
16								swEEHPFCoeff00
12								swEEHPFCoeff01
-8								swEEHPFCoeff02
12								swEEHPFCoeff10
8								swEEHPFCoeff11
-6								swEEHPFCoeff12
-8								swEEHPFCoeff20
-6								swEEHPFCoeff21
-4								swEEHPFCoeff22